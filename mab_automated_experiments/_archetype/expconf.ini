# ===================================================================
# FaaS Offloading Simulator
# Configuration file for automated experiments
# -------------------------------------------------------------------
# Use this file to set the parameters for the experiments you wish to
# run. The runner.py script will programmatically generate the desired
# configurations and run the experiments, according to what you
# specify in this file.
# ===================================================================

[experiment]
name = _archetype
description = a brief description of the experiment (not mandatory)

# Execution modes - the experiments are run in two phases:
#
# 1. pre-processing
#    some pre-processing is done before collecting the statistics
#
# 2. simulations
#    the simulator is run with the specified parameters, and
#    statistics are produced
#
# 3. post-processing
#    some post-processing is done with the statistics produced in
#    the previous stage
# 
# Options available for each phase:
#   - none					(simply don't run the phase)
#   - automated				(run the phase in an automated way, according to the parameters)
#   - (a different value)	(specify a relative path of a custom Python script that will be run for the phase)
mode-preprocessing = none
mode-simulations = automated
mode-postprocessing = none

# Maximum number of processes when parallel execution the simulations
# i.e., the number of processes among which the {strategies x axis_pre x axis_post} chuncks
#       will be distributed
# Thumb rule: a single simulation saturates 100% of a single CPU, so, approx.,
#       put here the number you wish but mind the number of CPUs you have
max-parallel-execution = 8

# Simulation time constants ([s])
close-door-time = 86400
stats-print-interval = 300
mab-update-interval = 300

[output]
# Specify the policy to be adopted with the output (statistics) of the experiments.
# Options available:
#   - no			(do not run any experiment, just use already produced stats files)
#   - skip-existent	(run experiment only if stat files are not available/readable for a specific combination)
#   - always		(run and overwrite in every case)
run-duplicates = skip-existent

# Specify the results (as labels) you want to persist
persist=policy, cumavg-reward, time, reward, activeMemoryUtilization_sys, instance_invoked, epochStartTimes_ctx, context_info, scenario_action, mab-occurred-events


[strategies]
# UCB strategies to be run in the experiments.
# (multiple values, comma-separated, are admissible)
# Options available:
# - Non-contextual:
#   - UCB       (i.e., UCB1)
#	- UCB2
#	- UCBTuned
#	- KL-UCB    (non-canonical implementation, please avoid unless you are doing it on purpose)
#   - KL-UCBsp
# - Contextual:
#   - RTK-UCBTuned
#   - RTK-UCB2
#   - RTK-KL-UCBsp
strategies = UCBTuned, UCB2

[parameters]
# Parameters for the executions.
# They can be specified as fixed or iterable.
#
# Please use, for the examples that follows:
#   - "param-name"  as specified in conf.py
#   - "value"       up to two decimals, dot-separated
#

#----------------------------------------------------------------------
# For FIXED (i.e., non-iterable) parameters, just specify:
#   - param-name = value
#
# Example:
# mab-ucb-exploration-factor=0.1
# mab-ucb2-alpha=0.2
# mab-kl-ucb-c=0.2

#----------------------------------------------------------------------
# For ITERABLE parameters please specify all of the following:
#   - param-name-start = value
#   - param-name-step = value
#   - param-name-end = value
mab-ucb-exploration-factor-start = 0
mab-ucb-exploration-factor-step = 0.1
mab-ucb-exploration-factor-end = 1

mab-ucb2-alpha-start = 0
mab-ucb2-alpha-step = 0.1
mab-ucb2-alpha-end = 1

mab-kl-ucb-c-start = 0
mab-kl-ucb-c-step = 0.1
mab-kl-ucb-c-end = 1

#----------------------------------------------------------------------
# For HYPERPARAMETERS TUNING via BAYESIAN OPTIMIZATION:
# If "bayesopt" is false, the subsequent parameters will be ignored
bayesopt=true

# acquisition function (EI) hyperparams
objfn-stabilizations-iterations=1
rand-points=4
iterations=20
improvement-threshold = 1e-4
sliding-window-size = 4

# optimization space:
# specify limits as follows:
#   - param-name-lower = value
#   - param-name-upper = value

# Example:
#ef-lower=0
#ef-upper=1
#ucb2-alpha-lower=0.001
#ucb2-alpha-upper=0.999
#klucb-c-lower=0
#klucb-c-upper=10

#----------------------------------------------------------------------
# Seed(s) (default: 123456789)
# (multiple values, comma-separated, are admissible)
seeds = 123456789

#----------------------------------------------------------------------
# Contextual scenarios
# ignored if no contextual strategy is provided
# (multiple values, comma-separated, are admissible)
# Options available:
#   - KD
#   - KIT (i.e., KI1)
#   - KI2
#   - KR
mab-rtk-contextual-scenarios = KD
[reward_fn]
# Specify the "axis" (i.e., the reward fn. parameters weights) that will be alternately put to 1.
# "axis_post" may differ from "axis_pre" if you want to try to change the reward function after a while.
# Otherwise, if you want the axis to be fixed, you can leave the "axis_post" field empty.
# (multiple values, comma-separated, are admissible)


# Options available:
#	- load_imb 		(i.e., alpha)
#	- rt			(i.e., beta)
#	- cost			(i.e., gamma)
#	- utility		(i.e., delta)
#	- violations	(i.e., zeta)
#   - cold_starts   (i.e., eta)
axis_pre = load_imb, rt, cost, utility, violations, cold_starts
axis_post= load_imb, rt, cost, utility, violations, cold_starts
