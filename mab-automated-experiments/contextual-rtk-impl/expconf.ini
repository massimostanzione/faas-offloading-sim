# ===================================================================
# FaaS Offloading Simulator
# Configuration file for automated experiments
# -------------------------------------------------------------------
# Use this file to set the parameters for the experiments you wish to
# run. The run.py script will programmatically generate the desired
# configurations and run the experiments, according to what you
# specify in this file.
# ===================================================================

[experiment]
name = contextual-rtk-impl
description = First experiments for RTK contextual MABs

# Execution modes - the experiments are run in two phases:
#
# 1. simulations
#    the simulator is run with the specified parameters, and
#    statistics are produced
#
# 2. post-processing
#    some post-processing is done with the statistics produced in
#    the previous stage
# 
# Options available for each phase:
#   - none					(simply don't run the phase)
#   - automated				(run the phase in an automated way, according to the parameters)
#   - (a different value)	(specify a relative path of a custom Python script that will be run for the phase)
# TODO
mode-preprocessing = pre.py
mode-simulations = automated
mode-postprocessing = post.py

# Maximum number of processes when parallel execution the simulations
# i.e., the number of processes among which the {strategies x axis_pre x axis_post} chuncks
#       will be distributed
max-parallel-execution = 12
close-door-time=14400
# 51099999999
#8640000

[output]
# Specify the policy to be adopted with the output (statistics) of the experiments.
# Options available:
#   - no			(do not run any experiment, just use already produced stats files)
#   - skip-existent	(run experiment only if stat files are not available/readable for a specific combination)
#   - always		(run and overwrite in every case)
run-duplicates = skip-existent
#skip-existent
persist=policy, cumavg-reward,time, reward, avgMemoryUtilization_sys, instance_invoked

[strategies]
# UCB strategies to be run in the experiments.
# (multiple values, comma-separated, are admissible)
# Options available:
#	- UCB2
#	- UCBTuned
#	- KL-UCB
#   - KL-UCBsp
strategies = RTK-UCBTuned, RTK-UCB2

[parameters]
# Parameters for the executions
# For iterable parameters please specify all of the following (up to two decimals):
#   - param-name-start
#   - param-name-step
#   - param-name-end


bayesopt=true

mab-ucb-exploration-factor-start = 0
mab-ucb-exploration-factor-step = 0.25
mab-ucb-exploration-factor-end = 1

mab-ucb2-alpha-start = 0.25
mab-ucb2-alpha-step = 0.25
mab-ucb2-alpha-end = 0.75

mab-kl-ucb-c-start = 2.5
mab-kl-ucb-c-step = 2.5
mab-kl-ucb-c-end = 7.5

objfn-stabilizations-iterations=1
rand-points=4
iterations=20
improvement-threshold = 1e-4
sliding-window-size = 4


ef-lower=0
ef-upper=1

ucb2-alpha-lower=0.001
ucb2-alpha-upper=0.999

specfiles=specbase, specbase*0.05, specbase*30,linear_f1, linear_f1_x5, linear_full,sinus_f1, sinus_f1_x5, sinus_full,4sinus_f1, 4sinus_f1_x5, 4sinus_full,halfbell_f1, halfbell_f1_x5, halfbell_full,bell_f1, bell_f1_x5, bell_full,square_f1, square_f1_x5, square_full,square_inv_f1, square_inv_f1_x5, square_inv_full,sawtooth_f1, sawtooth_f1_x5, sawtooth_full,4square_f1, 4square_f1_x5, 4square_full,4square_inv_f1, 4square_inv_f1_x5, 4square_inv_full,4sawtooth_f1, 4sawtooth_f1_x5, 4sawtooth_full,gauss_f1, gauss_f1_x5, gauss_full,debs-scaled_f1, debs-scaled_f1_x5, debs-scaled_full, STEPS



#prova1
#sawtooth-wave
#linear
#square-wave-inverted
#sinus, f1gauss, f1linear, f1linear_scaled, f1gauss_scaled, square

# Seed(s) (default: 123)
# (multiple values, comma-separated, are admissible)
seeds = 123456789
[reward_fn]
# Specify the "axis" (i.e., the reward fn. parameters weights) that will be alternately put to 1.
# "axis_post" may differ from "axis_pre" if you want to try to change the reward function after a while.
# Otherwise, if you want the axis to be fixed, you can leave the "axis_post" field empty.
# (multiple values, comma-separated, are admissible)
# Options available:
#	- load_imb 		(i.e., alpha)
#	- rt			(i.e., beta)
#	- cost			(i.e., gamma)
#	- utility		(i.e., delta)
#	- violations	(i.e., zeta)
axis_pre = rt, violations
axis_post= 

